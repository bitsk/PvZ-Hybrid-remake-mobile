name: Godot Export

on:
  workflow_dispatch:
env:
  GODOT_VERSION: 4.4.1
  APP_NAME: "植物大战僵尸杂交版"
  APP_VER: "0.4"
permissions:
  contents: write
jobs:
         
  prepare-godot-project:
    runs-on: windows-latest
    steps:
      - run: |
          # 设置 PowerShell 编码为 UTF-8
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $PSDefaultParameterValues['*:Encoding'] = 'utf8'
          
          Invoke-WebRequest -Uri "https://blob.bits.ink/pvz/v0.4/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E6%9D%82%E4%BA%A4%E7%89%88v0.4%E5%8F%91%E5%B8%83%E7%89%88.zip" -OutFile "pvz-release.zip"
          Invoke-WebRequest -Uri "https://blob.bits.ink/pvz/v0.4/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E6%9D%82%E4%BA%A4%E7%89%88v0.4%E5%8F%91%E5%B8%83%E5%85%BC%E5%AE%B9%E7%89%88.zip" -OutFile "pvz-compatible.zip"
          
          # 解压第一个文件
          Expand-Archive -Path "pvz-release.zip" -DestinationPath "release" -Force
          # 查看解压后的文件
          Write-Host "Release archive contents:"
          Get-ChildItem -Path "release" | ForEach-Object { Write-Host $_.Name }
          # 使用通配符移动 PCK 文件
          $pckFile = Get-ChildItem -Path "release" -Filter "*.pck" | Select-Object -First 1
          if ($pckFile) {
              Move-Item -Path $pckFile.FullName -Destination "pvz.pck"
              Write-Host "Moved $($pckFile.Name) to pvz.pck"
          }
          # 清理
          Remove-Item -Path "release" -Recurse -Force
          Remove-Item -Path "pvz-release.zip" -Force
          
          # 解压第二个文件
          Expand-Archive -Path "pvz-compatible.zip" -DestinationPath "compatible" -Force
          # 查看解压后的文件
          Write-Host "Compatible archive contents:"
          Get-ChildItem -Path "compatible" | ForEach-Object { Write-Host $_.Name }
          # 使用通配符移动 PCK 文件
          $pckFileGl = Get-ChildItem -Path "compatible" -Filter "*.pck" | Select-Object -First 1
          if ($pckFileGl) {
              Move-Item -Path $pckFileGl.FullName -Destination "pvz_gl.pck"
              Write-Host "Moved $($pckFileGl.Name) to pvz_gl.pck"
          }
          # 清理
          Remove-Item -Path "compatible" -Recurse -Force
          Remove-Item -Path "pvz-compatible.zip" -Force
          
          # 下载 GDRE Tools Windows 版本
          Invoke-WebRequest -Uri "https://github.com/GDRETools/gdsdecomp/releases/download/v1.0.0/GDRE_tools-v1.0.0-windows.zip" -OutFile "GDRE_tools-v1.0.0-windows.zip"
          Expand-Archive -Path "GDRE_tools-v1.0.0-windows.zip" -DestinationPath "." -Force
          New-Item -ItemType Directory -Path "pvz-project", "pvz-project-gl" -Force
          
          # 1) 使用 GDRE Tools 解包（解密）两个 PCK 到独立目录
          .\gdre_tools.exe --headless --recover=.\pvz.pck --output=.\pvz-project --key=${{ secrets.AES_KEY }}
          .\gdre_tools.exe --headless --recover=.\pvz_gl.pck --output=.\pvz-project-gl --key=${{ secrets.AES_KEY }}
          
          # 2) 下载 Godot 模板，添加重试和验证机制
          $maxRetries = 3
          $retryCount = 0
          $templateDownloaded = $false
          
          while ($retryCount -lt $maxRetries -and -not $templateDownloaded) {
              try {
                  Write-Host "Downloading Godot templates (attempt $($retryCount + 1)/$maxRetries)..."
                  Invoke-WebRequest -Uri "https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz" -OutFile "templates.tpz"
                  
                  # 检查文件大小
                  $fileInfo = Get-Item "templates.tpz"
                  Write-Host "Downloaded file size: $($fileInfo.Length) bytes"
                  
                  if ($fileInfo.Length -gt 1000000) {  # 至少 1MB
                      # 重命名并尝试解压
                      Rename-Item -Path "templates.tpz" -NewName "templates.zip"
                      
                      # 使用 7-Zip 而不是 PowerShell 的 Expand-Archive
                      Write-Host "Extracting templates using 7-Zip..."
                      & "C:\Program Files\7-Zip\7z.exe" x "templates.zip" -y
                      
                      if ($LASTEXITCODE -eq 0) {
                          Write-Host "Templates extracted successfully"
                          $templateDownloaded = $true
                          Remove-Item -Path "templates.zip" -Force
                          Remove-Item -Path "templates\android*", "templates\ios.zip", "templates\macos.zip", "templates\web*", "templates\win*", "templates\linux_debug*" -Force -ErrorAction SilentlyContinue
                      } else {
                          Write-Host "7-Zip extraction failed, retrying..."
                          Remove-Item -Path "templates.zip" -Force -ErrorAction SilentlyContinue
                      }
                  } else {
                      Write-Host "Downloaded file too small, retrying..."
                      Remove-Item -Path "templates.tpz" -Force -ErrorAction SilentlyContinue
                  }
              } catch {
                  Write-Host "Download failed: $($_.Exception.Message)"
                  Remove-Item -Path "templates.tpz" -Force -ErrorAction SilentlyContinue
                  Remove-Item -Path "templates.zip" -Force -ErrorAction SilentlyContinue
              }
              
              $retryCount++
              if (-not $templateDownloaded -and $retryCount -lt $maxRetries) {
                  Write-Host "Waiting 10 seconds before retry..."
                  Start-Sleep -Seconds 10
              }
          }
          
          if (-not $templateDownloaded) {
              Write-Host "Failed to download Godot templates after $maxRetries attempts"
              exit 1
          }
          
          # 下载 RISC-V 模板
          Invoke-WebRequest -Uri "https://gitee.com/openkylin/godot-riscv/releases/download/4.4/godot.linuxbsd.template_release.rv64.llvm.7z" -OutFile "riscv.7z"
          # 使用 7z 解压（Windows runner 自带）
          & "C:\Program Files\7-Zip\7z.exe" x riscv.7z -y
          Move-Item -Path "godot.linuxbsd.template_release.rv64.llvm" -Destination "templates\linux_release.rv64"
          
          # 3) 为不同架构直接生成嵌入 PCK 的可执行文件
          New-Item -ItemType Directory -Path "embedded-binaries" -Force
          $archs = @(
              @{name="amd64"; template="linux_release.x86_64"},
              @{name="arm64"; template="linux_release.arm64"},
              @{name="riscv64"; template="linux_release.rv64"}
          )
          
          foreach ($arch in $archs) {
              $template_name = $arch.template
              Write-Host "Processing architecture: $($arch.name) with template: $template_name"
              # 生成普通版
              .\gdre_tools.exe --headless --pck-create=.\pvz-project --output=.\embedded-binaries\$template_name --pck-version=2 --pck-engine-version=${{ env.GODOT_VERSION }} --embed=.\templates\$template_name
              # 生成GL版
              .\gdre_tools.exe --headless --pck-create=.\pvz-project-gl --output=.\embedded-binaries\${template_name}_gl --pck-version=2 --pck-engine-version=${{ env.GODOT_VERSION }} --embed=.\templates\$template_name
          }
          
          # 检查生成的文件
          Write-Host "Generated embedded binaries:"
          Get-ChildItem -Path "embedded-binaries" | ForEach-Object { Write-Host $_.Name }
        shell: powershell
          
      - name: Upload Project Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pvz-project
          path: pvz-project/
          
      - name: Upload Embedded Binaries
        uses: actions/upload-artifact@v4
        with:
          name: embedded-binaries
          path: embedded-binaries/
    
  export_game_android:
     runs-on: ubuntu-latest
     needs:
      - prepare-godot-project
     if: false # 此版本官方已放出apk，不再导出android
     steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Setup Java & Android SDK
        uses: android-actions/setup-android@v2
      - run: mkdir ./pvz-project && mkdir releases
      - name: Download Godot project artifact
        uses: actions/download-artifact@v4
        with:
          name: pvz-project
          path: ./pvz-project
      - run: cp assets/export_presets.cfg ./pvz-project
      - name: export game
        id: export
        uses: firebelley/godot-export@v6.0.0
        with:
          godot_executable_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
          relative_project_path: ./pvz-project/
          relative_export_path: ./releases
          presets_to_export: Android
      - run: find releases/ -name "*.apk" -exec mv {} releases/PlantsVsZombies_Hybrid_0.3.apk \;
      - name: Upload Project Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: ./releases/*.apk
          
  export_game_apple:
     runs-on: macos-latest
     needs:
      - prepare-godot-project
     steps:
      - name: checkout
        uses: actions/checkout@v4
      - run: mkdir ./pvz-project && mkdir releases
      - name: Download Godot project artifact
        uses: actions/download-artifact@v4
        with:
          name: pvz-project
          path: ./pvz-project
      - run: cp assets/export_presets.cfg ./pvz-project
      - name: export game mac
        uses: firebelley/godot-export@v6.0.0
        with:
          godot_executable_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_macos.universal.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
          relative_project_path: ./pvz-project/
          relative_export_path: ./releases
          presets_to_export: 'macOS'
          
      - name: export game ios
        uses: firebelley/godot-export@v6.0.0
        if: false #由于没有苹果开发者账户，无法导出ios版本
        with:
          godot_executable_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_macos.universal.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
          relative_project_path: ./pvz-project/
          relative_export_path: ./releases
          presets_to_export: 'iOS' 
          export_debug: true
      - run:  find releases/ -name "*.zip" -exec mv {} releases/PlantsVsZombies_Hybrid_0.3_MacOS.zip \;
      - name: Upload Project Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: ./releases/*.zip
          
  export-linux:
    runs-on: ubuntu-latest
    needs:
      - prepare-godot-project
      - export_game_apple
    container:
      image: debian:10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
                
      - name: Download Embedded Binaries
        uses: actions/download-artifact@v4
        with:
          name: embedded-binaries
          path: ./embedded-binaries

      - name: Create deb packages
        run: |
          sed -i s@deb.debian@archive.debian@g /etc/apt/sources.list
          apt update && apt install make dpkg -y
          set -e
          ls . && ls ./assets
          chmod +x ./embedded-binaries/*
          mkdir -p releases
          # 为 amd64/arm64/riscv64 三个架构分别打包（发布版与兼容版）
          for arch in amd64 arm64 riscv64; do
            if [ "$arch" = "amd64" ]; then bin_name=linux_release.x86_64; fi
            if [ "$arch" = "arm64" ]; then bin_name=linux_release.arm64; fi
            if [ "$arch" = "riscv64" ]; then bin_name=linux_release.rv64; fi
            for flavor in "" "_gl"; do
              workdir=deb_${arch}${flavor}
              rm -rf "$workdir"
              mkdir -p "$workdir/DEBIAN"
              mkdir -p "$workdir/opt/apps/com.pvzhe.hybrid-remake/files"
              mkdir -p "$workdir/opt/apps/com.pvzhe.hybrid-remake/entries/applications"
              mkdir -p "$workdir/opt/apps/com.pvzhe.hybrid-remake/entries/icons/hicolor/128x128/apps"
              # control/info 基于模板复制后替换
              cp assets/deb/control "$workdir/DEBIAN/control"
              cp assets/deb/info "$workdir/opt/apps/com.pvzhe.hybrid-remake/info"
              sed -i s@VERSION@$APP_VER@g "$workdir/DEBIAN/control"
              sed -i s@VERSION@$APP_VER@g "$workdir/opt/apps/com.pvzhe.hybrid-remake/info"
              sed -i s@ARCH@${arch}@g "$workdir/DEBIAN/control"
              sed -i s@ARCH@${arch}@g "$workdir/opt/apps/com.pvzhe.hybrid-remake/info"
              # 复制资源与桌面文件
              cp assets/deb/com.pvzhe.hybrid-remake.png "$workdir/opt/apps/com.pvzhe.hybrid-remake/entries/icons/hicolor/128x128/apps"
              cp assets/deb/com.pvzhe.hybrid-remake.desktop "$workdir/opt/apps/com.pvzhe.hybrid-remake/entries/applications"
              # 复制运行脚本（不需要 --main-pack 参数，因为 PCK 已嵌入）
              cp assets/deb/run.sh "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/run.sh"
              chmod +x "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/run.sh"
              echo "./${bin_name}${flavor} \$@" >> "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/run.sh"
              # 复制嵌入式二进制文件
              cp ./embedded-binaries/${bin_name}${flavor} "$workdir/opt/apps/com.pvzhe.hybrid-remake/files"
              chmod +x "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/${bin_name}${flavor}"
              # 构建 deb
              dpkg-deb -b "$workdir"
              out_name="com.pvzhe.hybrid-remake_${APP_VER}_${arch}"
              if [ "$flavor" = "_gl" ]; then out_name="${out_name}_gl"; fi
              mv ${workdir}.deb ${out_name}.deb
              mv ${out_name}.deb releases/
            done
          done
          
      - name: Download android release
        uses: actions/download-artifact@v4
        with:
          name: android
          path: ./releases 
          
      - name: Download other release
        uses: actions/download-artifact@v4
        with:
          name: macos
          path: ./releases        
          
      - name: Upload Release    
        uses: ncipollo/release-action@v1
        with:
           allowUpdates: true
           artifacts: >
             ./releases/*
           body: "由官方发布版移植而来，包括linux(arm64,x86_64)，Android和MacOS，因为没有开发者账户，所以暂时没有IOS。0.4版本官方已放出apk，不再导出android"
           name: ${{ env.APP_VER }}
           tag: ${{ env.APP_VER }}
           token: ${{ secrets.GITHUB_TOKEN }}
