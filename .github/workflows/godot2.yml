name: Godot Export

on:
  workflow_dispatch:
env:
  GODOT_VERSION: 4.4.1
  APP_NAME: "植物大战僵尸杂交版"
  APP_VER: "0.4"
permissions:
  contents: write
jobs:
         
  prepare-godot-project:
    runs-on: windows-latest
    steps:
      - name: Setup PowerShell encoding
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          $PSDefaultParameterValues['*:Encoding'] = 'utf8'
          $ErrorActionPreference = 'Stop'
          $ProgressPreference = 'SilentlyContinue'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          [System.Net.ServicePointManager]::DefaultConnectionLimit = 64
        shell: powershell

      - name: Cache PCKs (release and GL)
        id: cache-pvz-pck
        uses: actions/cache@v4
        with:
          path: |
            pvz.pck
            pvz_gl.pck
          key: pvz-pck-${{ runner.os }}-${{ env.APP_VER }}

      - name: Cache release zips
        id: cache-release-zips
        uses: actions/cache@v4
        with:
          path: |
            pvz-release.zip
            pvz-compatible.zip
          key: pvz-zips-${{ runner.os }}-${{ env.APP_VER }}

      - name: Cache GDRE Tools
        id: cache-gdre
        uses: actions/cache@v4
        with:
          path: |
            gdre_tools.exe
            gdre_tools.pck
          key: gdre-${{ runner.os }}-v1.0.0-b

      - name: Cache Godot templates
        id: cache-templates
        uses: actions/cache@v4
        with:
          path: templates
          key: templates-${{ runner.os }}-${{ env.GODOT_VERSION }}-riscv-v1

      - name: Download release archives
        if: steps.cache-pvz-pck.outputs.cache-hit != 'true' && steps.cache-release-zips.outputs.cache-hit != 'true'
        run: |
          curl.exe -L --retry 5 --retry-delay 5 --fail --continue-at - -o "pvz-release.zip" "https://blob.bits.ink/pvz/v0.4/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E6%9D%82%E4%BA%A4%E7%89%88v0.4%E5%8F%91%E5%B8%83%E7%89%88.zip"
          curl.exe -L --retry 5 --retry-delay 5 --fail --continue-at - -o "pvz-compatible.zip" "https://blob.bits.ink/pvz/v0.4/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E6%9D%82%E4%BA%A4%E7%89%88v0.4%E5%8F%91%E5%B8%83%E5%85%BC%E5%AE%B9%E7%89%88.zip"
        shell: powershell

      - name: Save release zips to cache
        if: steps.cache-release-zips.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            pvz-release.zip
            pvz-compatible.zip
          key: pvz-zips-${{ runner.os }}-${{ env.APP_VER }}

      - name: Extract release and move PCK
        if: steps.cache-pvz-pck.outputs.cache-hit != 'true'
        run: |
          Expand-Archive -Path "pvz-release.zip" -DestinationPath "release" -Force
          Write-Host "Release archive contents:"
          Get-ChildItem -Path "release" | ForEach-Object { Write-Host $_.Name }
          $pckFile = Get-ChildItem -Path "release" -Filter "*.pck" | Select-Object -First 1
          if ($pckFile) {
            Move-Item -Path $pckFile.FullName -Destination "pvz.pck"
            Write-Host "Moved $($pckFile.Name) to pvz.pck"
          } else {
            throw 'no pck found in release archive'
          }
          Remove-Item -Path "release" -Recurse -Force
          Remove-Item -Path "pvz-release.zip" -Force
        shell: powershell

      - name: Extract compatible and move PCK (GL)
        if: steps.cache-pvz-pck.outputs.cache-hit != 'true'
        run: |
          Expand-Archive -Path "pvz-compatible.zip" -DestinationPath "compatible" -Force
          Write-Host "Compatible archive contents:"
          Get-ChildItem -Path "compatible" | ForEach-Object { Write-Host $_.Name }
          $pckFileGl = Get-ChildItem -Path "compatible" -Filter "*.pck" | Select-Object -First 1
          if ($pckFileGl) {
            Move-Item -Path $pckFileGl.FullName -Destination "pvz_gl.pck"
            Write-Host "Moved $($pckFileGl.Name) to pvz_gl.pck"
          } else {
            throw 'no pck found in compatible archive'
          }
          Remove-Item -Path "compatible" -Recurse -Force
          Remove-Item -Path "pvz-compatible.zip" -Force
        shell: powershell

      - name: Download and extract GDRE Tools
        if: steps.cache-gdre.outputs.cache-hit != 'true'
        run: |
          curl.exe -L --retry 5 --retry-delay 5 --fail --continue-at - -o "GDRE_tools-v1.0.0-windows.zip" "https://github.com/GDRETools/gdsdecomp/releases/download/v1.0.0/GDRE_tools-v1.0.0-windows.zip"
          Expand-Archive -Path "GDRE_tools-v1.0.0-windows.zip" -DestinationPath "." -Force
        shell: powershell

      - name: Ensure project directories
        run: |
          New-Item -ItemType Directory -Path "pvz-project", "pvz-project-gl" -Force | Out-Null
        shell: powershell

      - name: Recover PCKs to Godot projects
        run: |
          $args1 = @('--headless', '--recover=./pvz.pck', '--output=./pvz-project', "--key=${{ secrets.AES_KEY }}")
          $p1 = Start-Process -FilePath .\gdre_tools.exe -ArgumentList $args1 -NoNewWindow -PassThru -Wait
          Write-Host "gdre recover normal exit code: $($p1.ExitCode)"
          $files1 = (Get-ChildItem -Path ".\pvz-project" -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count
          Write-Host "pvz-project file count: $files1"
          if ($files1 -lt 100) { throw "GDRE recover (normal) produced too few files: $files1" }

          $args2 = @('--headless', '--recover=./pvz_gl.pck', '--output=./pvz-project-gl', "--key=${{ secrets.AES_KEY }}")
          $p2 = Start-Process -FilePath .\gdre_tools.exe -ArgumentList $args2 -NoNewWindow -PassThru -Wait
          Write-Host "gdre recover GL exit code: $($p2.ExitCode)"
          $files2 = (Get-ChildItem -Path ".\pvz-project-gl" -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count
          Write-Host "pvz-project-gl file count: $files2"
          if ($files2 -lt 100) { throw "GDRE recover (GL) produced too few files: $files2" }
        shell: powershell

      - name: Download Godot export templates
        if: steps.cache-templates.outputs.cache-hit != 'true'
        run: |
          $maxRetries = 3
          $retryCount = 0
          $templateDownloaded = $false
          while ($retryCount -lt $maxRetries -and -not $templateDownloaded) {
            try {
              Write-Host "Downloading Godot templates (attempt $($retryCount + 1)/$maxRetries)..."
              curl.exe -L --retry 5 --retry-delay 5 --fail --continue-at - -o "templates.tpz" "https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz"
              $fileInfo = Get-Item "templates.tpz"
              Write-Host "Downloaded file size: $($fileInfo.Length) bytes"
              if ($fileInfo.Length -gt 1000000) {
                Rename-Item -Path "templates.tpz" -NewName "templates.zip"
                Write-Host "Extracting templates using 7-Zip..."
                & "C:\Program Files\7-Zip\7z.exe" x "templates.zip" -y
                if ($LASTEXITCODE -eq 0) {
                  Write-Host "Templates extracted successfully"
                  $templateDownloaded = $true
                  Remove-Item -Path "templates.zip" -Force
                  Remove-Item -Path "templates\android*", "templates\ios.zip", "templates\macos.zip", "templates\web*", "templates\win*", "templates\linux_debug*" -Force -ErrorAction SilentlyContinue
                } else {
                  Write-Host "7-Zip extraction failed, retrying..."
                  Remove-Item -Path "templates.zip" -Force -ErrorAction SilentlyContinue
                }
              } else {
                Write-Host "Downloaded file too small, retrying..."
                Remove-Item -Path "templates.tpz" -Force -ErrorAction SilentlyContinue
              }
            } catch {
              Write-Host "Download failed: $($_.Exception.Message)"
              Remove-Item -Path "templates.tpz" -Force -ErrorAction SilentlyContinue
              Remove-Item -Path "templates.zip" -Force -ErrorAction SilentlyContinue
            }
            $retryCount++
            if (-not $templateDownloaded -and $retryCount -lt $maxRetries) {
              Write-Host "Waiting 10 seconds before retry..."
              Start-Sleep -Seconds 10
            }
          }
          if (-not $templateDownloaded) { throw 'failed to download Godot templates after retries' }
        shell: powershell

      - name: Download RISC-V export template
        if: steps.cache-templates.outputs.cache-hit != 'true'
        run: |
          curl.exe -L --retry 5 --retry-delay 5 --fail --continue-at - -o "riscv.7z" "https://gitee.com/openkylin/godot-riscv/releases/download/4.4/godot.linuxbsd.template_release.rv64.llvm.7z"
          & "C:\Program Files\7-Zip\7z.exe" x riscv.7z -y
          Move-Item -Path "godot.linuxbsd.template_release.rv64.llvm" -Destination "templates\linux_release.rv64"
        shell: powershell

      - name: Save Godot templates to cache
        if: steps.cache-templates.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: templates
          key: templates-${{ runner.os }}-${{ env.GODOT_VERSION }}-riscv-v1

      - name: Upload Project Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pvz-project
          path: pvz-project/
      
      - name: Upload GL Project Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pvz-project-gl
          path: pvz-project-gl/
    
  export_game_android:
     runs-on: ubuntu-latest
     needs:
      - prepare-godot-project
     if: false # 此版本官方已放出apk，不再导出android
     steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Setup Java & Android SDK
        uses: android-actions/setup-android@v2
      - run: mkdir ./pvz-project && mkdir releases
      - name: Download Godot project artifact
        uses: actions/download-artifact@v4
        with:
          name: pvz-project
          path: ./pvz-project
      - run: cp assets/export_presets.cfg ./pvz-project
      - name: export game
        id: export
        uses: firebelley/godot-export@v6.0.0
        with:
          godot_executable_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
          relative_project_path: ./pvz-project/
          relative_export_path: ./releases
          presets_to_export: Android
      - run: find releases/ -name "*.apk" -exec mv {} releases/PlantsVsZombies_Hybrid_0.3.apk \;
      - name: Upload Project Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: ./releases/*.apk
          
  export_game_apple:
     runs-on: macos-latest
     needs:
      - prepare-godot-project
     steps:
      - name: checkout
        uses: actions/checkout@v4
      - run: mkdir ./pvz-project && mkdir releases
      - name: Download Godot project artifact
        uses: actions/download-artifact@v4
        with:
          name: pvz-project
          path: ./pvz-project
      - run: cp assets/export_presets.cfg ./pvz-project
      - name: export game mac
        uses: firebelley/godot-export@v6.0.0
        with:
          godot_executable_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_macos.universal.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
          relative_project_path: ./pvz-project/
          relative_export_path: ./releases
          presets_to_export: 'macOS'
          
      - name: export game ios
        uses: firebelley/godot-export@v6.0.0
        if: false #由于没有苹果开发者账户，无法导出ios版本
        with:
          godot_executable_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_macos.universal.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
          relative_project_path: ./pvz-project/
          relative_export_path: ./releases
          presets_to_export: 'iOS' 
          export_debug: true
      - run:  find releases/ -name "*.zip" -exec mv {} releases/PlantsVsZombies_Hybrid_0.3_MacOS.zip \;
      - name: Upload Project Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: ./releases/*.zip
          
  export-linux:
    runs-on: ubuntu-latest
    needs:
      - prepare-godot-project
      - export_game_apple
    container:
      image: debian:10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Godot project artifact (normal)
        uses: actions/download-artifact@v4
        with:
          name: pvz-project
          path: ./pvz-project

      - name: Download Godot project artifact (GL)
        uses: actions/download-artifact@v4
        with:
          name: pvz-project-gl
          path: ./pvz-project-gl

      - name: Install build dependencies
        run: |
          sed -i s@deb.debian@archive.debian@g /etc/apt/sources.list
          apt update && apt install -y curl unzip p7zip-full make dpkg
        shell: bash

      - name: Repack PCKs on Linux with GDRE 0.9.1
        run: |
          set -e
          curl -L --retry 5 --retry-delay 5 --fail --continue-at - -o GDRE_tools-v0.9.1-linux.zip https://github.com/GDRETools/gdsdecomp/releases/download/v0.9.1/GDRE_tools-v0.9.1-linux.zip
          unzip -o GDRE_tools-v0.9.1-linux.zip
          chmod +x ./gdre_tools.x86_64 || true
          GDRE_BIN=./gdre_tools.x86_64
          "$GDRE_BIN" --headless --pck-create=./pvz-project --output=./pvz.pck --pck-version=2 --pck-engine-version=${GODOT_VERSION}
          test -s ./pvz.pck
          "$GDRE_BIN" --headless --pck-create=./pvz-project-gl --output=./pvz_gl.pck --pck-version=2 --pck-engine-version=${GODOT_VERSION}
          test -s ./pvz_gl.pck
        shell: bash

      - name: Download Linux export templates
        run: |
          set -e
          curl -L --retry 5 --retry-delay 5 --fail --continue-at - -o templates.tpz https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
          unzip -o templates.tpz
          rm -f templates.tpz
          rm -f templates/android* templates/ios.zip templates/macos.zip templates/web* templates/win* templates/linux_debug*
          curl -L --retry 5 --retry-delay 5 --fail --continue-at - -o riscv.7z https://gitee.com/openkylin/godot-riscv/releases/download/4.4/godot.linuxbsd.template_release.rv64.llvm.7z
          7z x -y riscv.7z
          mv godot.linuxbsd.template_release.rv64.llvm templates/linux_release.rv64
          rm -f riscv.7z
        shell: bash

      - name: Create deb packages
        run: |
          set -e
          ls . && ls ./assets
          mkdir -p releases
          # 为 amd64/arm64/riscv64 三个架构分别打包（发布版与兼容版），二进制与 PCK 分离
          for arch in amd64 arm64 riscv64; do
            if [ "$arch" = "amd64" ]; then bin_name=linux_release.x86_64; fi
            if [ "$arch" = "arm64" ]; then bin_name=linux_release.arm64; fi
            if [ "$arch" = "riscv64" ]; then bin_name=linux_release.rv64; fi
            for flavor in "" "_gl"; do
              workdir=deb_${arch}${flavor}
              rm -rf "$workdir"
              mkdir -p "$workdir/DEBIAN"
              mkdir -p "$workdir/opt/apps/com.pvzhe.hybrid-remake/files"
              mkdir -p "$workdir/opt/apps/com.pvzhe.hybrid-remake/entries/applications"
              mkdir -p "$workdir/opt/apps/com.pvzhe.hybrid-remake/entries/icons/hicolor/128x128/apps"
              # control/info 基于模板复制后替换
              cp assets/deb/control "$workdir/DEBIAN/control"
              cp assets/deb/info "$workdir/opt/apps/com.pvzhe.hybrid-remake/info"
              sed -i s@VERSION@$APP_VER@g "$workdir/DEBIAN/control"
              sed -i s@VERSION@$APP_VER@g "$workdir/opt/apps/com.pvzhe.hybrid-remake/info"
              sed -i s@ARCH@${arch}@g "$workdir/DEBIAN/control"
              sed -i s@ARCH@${arch}@g "$workdir/opt/apps/com.pvzhe.hybrid-remake/info"
              # 复制资源与桌面文件
              cp assets/deb/com.pvzhe.hybrid-remake.png "$workdir/opt/apps/com.pvzhe.hybrid-remake/entries/icons/hicolor/128x128/apps"
              cp assets/deb/com.pvzhe.hybrid-remake.desktop "$workdir/opt/apps/com.pvzhe.hybrid-remake/entries/applications"
              # 复制运行脚本（使用 --main-pack 指定 PCK）
              cp assets/deb/run.sh "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/run.sh"
              chmod +x "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/run.sh"
              if [ "$flavor" = "_gl" ]; then pack_file=pvz_gl.pck; else pack_file=pvz.pck; fi
              echo "./${bin_name} --main-pack ${pack_file} \$@" >> "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/run.sh"
              # 复制模板二进制与 PCK（分离放置）
              cp ./templates/${bin_name} "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/${bin_name}"
              chmod +x "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/${bin_name}"
              cp ./${pack_file} "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/${pack_file}"
              # 构建 deb
              dpkg-deb -b "$workdir"
              out_name="com.pvzhe.hybrid-remake_${APP_VER}_${arch}"
              if [ "$flavor" = "_gl" ]; then out_name="${out_name}_gl"; fi
              mv ${workdir}.deb ${out_name}.deb
              mv ${out_name}.deb releases/
            done
          done
          
      - name: Download android release
        uses: actions/download-artifact@v4
        with:
          name: android
          path: ./releases 
          
      - name: Download other release
        uses: actions/download-artifact@v4
        with:
          name: macos
          path: ./releases        
          
      - name: Upload Release    
        uses: ncipollo/release-action@v1
        with:
           allowUpdates: true
           artifacts: >
             ./releases/*
           body: "由官方发布版移植而来，包括linux(arm64,x86_64,riscv64)，Android和MacOS，因为没有开发者账户，所以暂时没有IOS。0.4版本官方已放出apk，不再导出android"
           name: ${{ env.APP_VER }}
           tag: ${{ env.APP_VER }}
           token: ${{ secrets.GITHUB_TOKEN }}
