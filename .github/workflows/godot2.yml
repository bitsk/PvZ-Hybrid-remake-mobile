name: Godot Export

on:
  workflow_dispatch:
env:
  GODOT_VERSION: 4.4.1
  APP_NAME: "植物大战僵尸杂交版"
  APP_VER: "0.6.1"
permissions:
  contents: write
jobs:
  export-linux:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          apt-get update && apt-get install -y \
            curl wget unzip p7zip-full make dpkg \
            ca-certificates \
            libx11-6 libxcursor1 libxinerama1 libxi6 libxrandr2 libgl1 libpulse0
        shell: bash

      - name: Download v0.6.1 release archives (normal + GL)
        run: |
          set -e
          REF='https://pvzgame.app/'
          UA='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122 Safari/537.36'
          URL_RELEASE='https://r2.182666.xyz/植物大战僵尸杂交版v0.6.1发布版.zip'
          URL_COMP='https://r2.182666.xyz/植物大战僵尸杂交版v0.6.1发布兼容版.zip'
          proxies=(
            'http://106.14.91.83:9080'
            'http://47.119.22.156:8080'
            'http://47.119.164.33:8080'
            'http://47.92.82.167:80'
          )
          download_wget() {
            out="$1"; url="$2"; shift 2
            wget --tries=5 --waitretry=5 --retry-connrefused --timeout=60 \
              --user-agent="$UA" --referer="$REF" -O "$out" "$url"
          }
          try_download() {
            out="$1"; url="$2"
            set +e
            download_wget "$out" "$url"; rc=$?
            if [ $rc -ne 0 ]; then
              for p in "${proxies[@]}"; do
                echo "Retry via proxy: $p"
                HTTPS_PROXY="$p" HTTP_PROXY="$p" ALL_PROXY="$p" download_wget "$out" "$url"; rc=$?
                [ $rc -eq 0 ] && break
              done
            fi
            set -e
            if [ $rc -ne 0 ] || [ ! -s "$out" ]; then
              echo "Failed to download $out" >&2; exit 1
            fi
          }
          try_download pvz-release.zip "$URL_RELEASE"
          try_download pvz-compatible.zip "$URL_COMP"
        shell: bash

      - name: Extract release and move PCKs
        run: |
          set -e
          mkdir -p release compatible
          unzip -o pvz-release.zip -d release
          unzip -o pvz-compatible.zip -d compatible
          # 选取各自压缩包中找到的第一个 .pck
          PCK_NORMAL=$(find release -type f -name '*.pck' | head -n1)
          if [ -z "$PCK_NORMAL" ]; then echo "no pck found in release" >&2; exit 1; fi
          mv "$PCK_NORMAL" pvz.pck
          PCK_GL=$(find compatible -type f -name '*.pck' | head -n1)
          if [ -z "$PCK_GL" ]; then echo "no pck found in compatible" >&2; exit 1; fi
          mv "$PCK_GL" pvz_gl.pck
          rm -rf release compatible pvz-release.zip pvz-compatible.zip
          test -s ./pvz.pck && test -s ./pvz_gl.pck
        shell: bash

      - name: Download GDRE Tools v2.0.0-beta.2 (Linux)
        run: |
          set -e
          curl -L --retry 5 --retry-delay 5 --fail --continue-at - -o GDRE_tools-linux.zip https://github.com/GDRETools/gdsdecomp/releases/download/v2.0.0-beta.2/GDRE_tools-v2.0.0-beta.2-linux.zip
          unzip -o GDRE_tools-linux.zip
          rm -f GDRE_tools-linux.zip
          chmod +x ./gdre_tools.x86_64 || true
        shell: bash

      - name: Recover PCKs to Godot projects (GDRE 2.0)
        run: |
          set -e
          mkdir -p pvz-project pvz-project-gl
          GDRE_BIN=./gdre_tools.x86_64
          "$GDRE_BIN" --headless --recover=./pvz.pck --output=./pvz-project --key='${{ secrets.AES_KEY }}'
          files1=$(find ./pvz-project -type f | wc -l)
          if [ "$files1" -lt 100 ]; then echo "GDRE recover (normal) produced too few files: $files1" >&2; exit 1; fi
          "$GDRE_BIN" --headless --recover=./pvz_gl.pck --output=./pvz-project-gl --key='${{ secrets.AES_KEY }}'
          files2=$(find ./pvz-project-gl -type f | wc -l)
          if [ "$files2" -lt 100 ]; then echo "GDRE recover (GL) produced too few files: $files2" >&2; exit 1; fi
        shell: bash

      - name: Download Godot editor (Linux)
        run: |
          set -e
          curl -L --retry 5 --retry-delay 5 --fail --continue-at - -o godot.zip https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_linux.x86_64.zip
          unzip -o godot.zip
          rm -f godot.zip
          mv Godot_v${GODOT_VERSION}-stable_linux.x86_64 godot
          chmod +x ./godot
        shell: bash

      - name: Pre-import projects and generate UID cache
        run: |
          set -e
          ./godot --headless --path ./pvz-project --editor --quit
          ./godot --headless --path ./pvz-project-gl --editor --quit
        shell: bash

      - name: Repack PCKs from recovered projects (GDRE 2.0)
        run: |
          set -e
          GDRE_BIN=./gdre_tools.x86_64
          "$GDRE_BIN" --headless --pck-create=./pvz-project --output=./pvz.pck --pck-version=2 --pck-engine-version=${GODOT_VERSION}
          test -s ./pvz.pck
          "$GDRE_BIN" --headless --pck-create=./pvz-project-gl --output=./pvz_gl.pck --pck-version=2 --pck-engine-version=${GODOT_VERSION}
          test -s ./pvz_gl.pck
        shell: bash

      - name: Upload recovered Godot projects
        uses: actions/upload-artifact@v4
        with:
          name: pvz-projects-0.6.1
          path: |
            pvz-project/
            pvz-project-gl/

      - name: Download Linux export templates
        run: |
          set -e
          curl -L --retry 5 --retry-delay 5 --fail --continue-at - -o templates.tpz https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
          unzip -o templates.tpz
          rm -f templates.tpz
          rm -f templates/android* templates/ios.zip templates/macos.zip templates/web* templates/win* templates/linux_debug*
          curl -L --retry 5 --retry-delay 5 --fail --continue-at - -o riscv.7z https://gitee.com/openkylin/godot-riscv/releases/download/4.4/godot.linuxbsd.template_release.rv64.llvm.7z
          7z x -y riscv.7z
          mv godot.linuxbsd.template_release.rv64.llvm templates/linux_release.rv64
          rm -f riscv.7z
        shell: bash

      - name: Create deb packages
        run: |
          set -e
          ls . && ls ./assets
          mkdir -p releases
          # 为 amd64/arm64/riscv64 三个架构分别打包（发布版与兼容版），二进制与 PCK 分离
          for arch in amd64 arm64 riscv64; do
            if [ "$arch" = "amd64" ]; then bin_name=linux_release.x86_64; fi
            if [ "$arch" = "arm64" ]; then bin_name=linux_release.arm64; fi
            if [ "$arch" = "riscv64" ]; then bin_name=linux_release.rv64; fi
            for flavor in "" "_gl"; do
              workdir=deb_${arch}${flavor}
              rm -rf "$workdir"
              mkdir -p "$workdir/DEBIAN"
              mkdir -p "$workdir/opt/apps/com.pvzhe.hybrid-remake/files"
              mkdir -p "$workdir/usr/share/applications"
              mkdir -p "$workdir/usr/share/icons/hicolor/128x128/apps"
              # control/info 基于模板复制后替换
              cp assets/deb/control "$workdir/DEBIAN/control"
              cp assets/deb/info "$workdir/opt/apps/com.pvzhe.hybrid-remake/info"
              sed -i s@VERSION@$APP_VER@g "$workdir/DEBIAN/control"
              sed -i s@VERSION@$APP_VER@g "$workdir/opt/apps/com.pvzhe.hybrid-remake/info"
              sed -i s@ARCH@${arch}@g "$workdir/DEBIAN/control"
              sed -i s@ARCH@${arch}@g "$workdir/opt/apps/com.pvzhe.hybrid-remake/info"
              # 安装desktop到桌面
              cp assets/deb/postinst "$workdir/DEBIAN/postinst"
              cp assets/deb/postrm "$workdir/DEBIAN/postrm"
              chmod +x "$workdir/DEBIAN/postinst"
              chmod +x "$workdir/DEBIAN/postrm"
              # 复制资源与桌面文件
              cp assets/deb/com.pvzhe.hybrid-remake.png "$workdir/usr/share/icons/hicolor/128x128/apps"
              cp assets/deb/com.pvzhe.hybrid-remake.desktop "$workdir/usr/share/applications"
              # 复制运行脚本（使用 --main-pack 指定 PCK）
              cp assets/deb/run.sh "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/run.sh"
              chmod +x "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/run.sh"
              if [ "$flavor" = "_gl" ]; then pack_file=pvz_gl.pck; else pack_file=pvz.pck; fi
              echo "./${bin_name} --main-pack ${pack_file} \$@" >> "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/run.sh"
              # 复制模板二进制与 PCK（分离放置）
              cp ./templates/${bin_name} "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/${bin_name}"
              chmod +x "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/${bin_name}"
              cp ./${pack_file} "$workdir/opt/apps/com.pvzhe.hybrid-remake/files/${pack_file}"
              # 构建 deb
              dpkg-deb -b "$workdir"
              out_name="pvzhe-hybrid_${APP_VER}_${arch}"
              if [ "$flavor" = "_gl" ]; then out_name="${out_name}_gl"; fi
              mv ${workdir}.deb ${out_name}.deb
              mv ${out_name}.deb releases/
            done
          done
      - name: Upload Release    
        uses: ncipollo/release-action@v1
        with:
           allowUpdates: true
           artifacts: >
             ./releases/*
           body: "由官方发布版移植而来，包含 Linux (amd64, arm64, riscv64) 与 GL 兼容变体。"
           name: ${{ env.APP_VER }}
           tag: ${{ env.APP_VER }}
           token: ${{ secrets.GITHUB_TOKEN }}
